{
	"name": "regex-le",
	"publisher": "nolindnaidoo",
	"displayName": "Regex-LE",
	"description": "Zero-Hassle Regex Extraction & Validation - Test, extract, and validate regular expressions directly inside VS Code with real-time match previews, performance scoring, and built-in ReDoS detection.",
	"version": "0.1.0",
	"license": "MIT",
	"author": {
		"name": "OffensiveEdge",
		"url": "https://github.com/OffensiveEdge"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/OffensiveEdge/regex-le.git"
	},
	"bugs": {
		"url": "https://github.com/OffensiveEdge/regex-le/issues"
	},
	"homepage": "https://github.com/OffensiveEdge/regex-le#readme",
	"engines": {
		"vscode": "^1.70.0",
		"node": ">=20.0.0"
	},
	"categories": [
		"Other",
		"Programming Languages",
		"Linters"
	],
	"keywords": [
		"regex",
		"regular expression",
		"regexp",
		"extract",
		"extraction",
		"validation",
		"test",
		"match",
		"redos",
		"security",
		"performance",
		"pattern"
	],
	"icon": "src/assets/images/icon.png",
	"main": "./dist/extension.js",
	"l10n": "./package.nls.json",
	"activationEvents": [
		"onCommand:regex-le.test",
		"onCommand:regex-le.extract",
		"onCommand:regex-le.validate",
		"onCommand:regex-le.openSettings",
		"onCommand:regex-le.help"
	],
	"capabilities": {
		"virtualWorkspaces": {
			"supported": "limited",
			"description": "%manifest.capability.untrusted-workspaces.desc%"
		},
		"untrustedWorkspaces": {
			"supported": "limited",
			"description": "%manifest.capability.untrusted-workspaces.desc%"
		}
	},
	"contributes": {
		"commands": [
			{
				"command": "regex-le.test",
				"title": "%manifest.command.test.title%",
				"category": "%manifest.command.category%"
			},
			{
				"command": "regex-le.extract",
				"title": "%manifest.command.extract.title%",
				"category": "%manifest.command.category%"
			},
			{
				"command": "regex-le.validate",
				"title": "%manifest.command.validate.title%",
				"category": "%manifest.command.category%"
			},
			{
				"command": "regex-le.openSettings",
				"title": "%manifest.command.settings.title%",
				"category": "%manifest.command.category%"
			},
			{
				"command": "regex-le.help",
				"title": "%manifest.command.help.title%",
				"category": "%manifest.command.category%"
			}
		],
		"keybindings": [
			{
				"command": "regex-le.test",
				"key": "ctrl+alt+r",
				"mac": "cmd+alt+r",
				"when": "editorTextFocus"
			}
		],
		"menus": {
			"editor/context": [
				{
					"command": "regex-le.test",
					"when": "editorTextFocus",
					"group": "1_modification@1"
				}
			],
			"commandPalette": [
				{
					"command": "regex-le.test"
				},
				{
					"command": "regex-le.extract"
				},
				{
					"command": "regex-le.validate"
				},
				{
					"command": "regex-le.openSettings"
				},
				{
					"command": "regex-le.help"
				}
			]
		},
		"configuration": {
			"title": "%manifest.settings.title%",
			"properties": {
				"regex-le.copyToClipboardEnabled": {
					"type": "boolean",
					"default": false,
					"description": "%manifest.settings.copy.clipboard.desc%"
				},
				"regex-le.notificationsLevel": {
					"type": "string",
					"default": "silent",
					"enum": [
						"all",
						"important",
						"silent"
					],
					"enumDescriptions": [
						"%manifest.settings.notifications.level.option.all%",
						"%manifest.settings.notifications.level.option.important%",
						"%manifest.settings.notifications.level.option.silent%"
					],
					"description": "%manifest.settings.notifications.level.desc%"
				},
				"regex-le.openResultsSideBySide": {
					"type": "boolean",
					"default": true,
					"description": "%manifest.settings.open.side-by-side.desc%"
				},
				"regex-le.safety.enabled": {
					"type": "boolean",
					"default": true,
					"description": "%manifest.settings.safety.enabled.desc%"
				},
				"regex-le.safety.fileSizeWarnBytes": {
					"type": "number",
					"default": 1000000,
					"minimum": 1000,
					"description": "%manifest.settings.safety.warn.file-size.desc%"
				},
				"regex-le.safety.largeOutputLinesThreshold": {
					"type": "number",
					"default": 50000,
					"minimum": 100,
					"description": "%manifest.settings.safety.warn.large-output.desc%"
				},
				"regex-le.statusBar.enabled": {
					"type": "boolean",
					"default": true,
					"description": "%manifest.settings.statusbar.enabled.desc%"
				},
				"regex-le.telemetryEnabled": {
					"type": "boolean",
					"default": false,
					"description": "%manifest.settings.telemetry.desc%"
				},
				"regex-le.performance.enabled": {
					"type": "boolean",
					"default": true,
					"description": "%manifest.settings.performance.enabled.desc%"
				},
				"regex-le.performance.maxDuration": {
					"type": "number",
					"default": 5000,
					"minimum": 1000,
					"description": "%manifest.settings.performance.max-duration.desc%"
				},
				"regex-le.performance.maxMemoryUsage": {
					"type": "number",
					"default": 104857600,
					"minimum": 1048576,
					"description": "%manifest.settings.performance.max-memory.desc%"
				},
				"regex-le.regex.realtimePreviewEnabled": {
					"type": "boolean",
					"default": true,
					"description": "%manifest.settings.regex.realtime-preview.desc%"
				},
				"regex-le.regex.redosDetectionEnabled": {
					"type": "boolean",
					"default": true,
					"description": "%manifest.settings.regex.redos-detection.desc%"
				},
				"regex-le.regex.maxMatchLimit": {
					"type": "number",
					"default": 1000,
					"minimum": 10,
					"maximum": 10000,
					"description": "%manifest.settings.regex.max-match-limit.desc%"
				}
			}
		}
	},
	"scripts": {
		"build": "tsc -p ./",
		"clean": "rm -rf dist coverage",
		"clean:i18n": "node -e \"const fs=require('fs');fs.readdirSync('.').filter(f=>f.startsWith('package.nls.')&&f.endsWith('.json')&&f!=='package.nls.json').forEach(f=>fs.unlinkSync(f));try{fs.rmSync('vsix',{recursive:true})}catch(e){}\"",
		"copy:i18n": "cp src/i18n/package.nls*.json . 2>/dev/null || true",
		"watch": "tsc -watch -p ./",
		"test": "vitest run --pool=threads",
		"test:watch": "vitest --pool=threads",
		"test:coverage": "vitest run --coverage --pool=threads",
		"test:ui": "vitest --ui",
		"lint": "biome check .",
		"lint:fix": "biome check --write .",
		"vscode:prepublish": "bun run build && bun run copy:i18n",
		"package": "bun run copy:i18n && mkdir -p release && bun x vsce package --out release/${npm_package_name}-${npm_package_version}.vsix && bun run clean:i18n",
		"package:ls": "vsce ls release/${npm_package_name}-${npm_package_version}.vsix --tree | cat",
		"publish": "vsce publish"
	},
	"devDependencies": {
		"@biomejs/biome": "^2.2.5",
		"@types/node": "^24.7.1",
		"@types/vscode": "^1.70.0",
		"@vscode/test-electron": "^2.3.0",
		"@vscode/vsce": "^3.6.2",
		"@vitest/coverage-v8": "^3.2.4",
		"@vitest/ui": "^3.2.4",
		"tsx": "^4.20.6",
		"typescript": "^5.9.3",
		"vitest": "^3.2.4"
	},
	"dependencies": {
		"vscode-nls": "^5.2.0"
	}
}

